#!/bin/python3

import subprocess
import sys

if len(sys.argv) != 2:
    print("Usage: userRank.py <username>")
    sys.exit(1)

requested_user = sys.argv[1]


class UserShare:
    def __init__(self, line):
        data = line.strip().split()
        self.username = data[1]
        self.raw_usage = data[4]
        self.fair_share = data[6]
        self.fair_share_rank = (None,)
        self.raw_usage_rank = None

    def __repr__(self):
        return f"UserShare({self.base_account}, {self.username}, {self.value1}, {self.value2}, {self.value3}, {self.value4}, {self.value5})"


def buildRanking(share_data, base_account="aalto_users"):
    relevant_shares = {
        line.strip().split()[1]: UserShare(line)
        for line in share_data
        if len(line.strip().split()) == 7
    }
    fair_share_ranking = sorted(relevant_shares.values(), key=lambda x: x.fair_share)
    raw_usage_ranking = sorted(
        relevant_shares.values(), key=lambda x: x.raw_usage, reverse=True
    )
    for rank, user_share in enumerate(fair_share_ranking, start=1):
        user_share.fair_share_rank = rank
    for rank, user_share in enumerate(raw_usage_ranking, start=1):
        user_share.raw_usage_rank = rank
    return relevant_shares


share_process = subprocess.Popen("sshare --all", stdout=subprocess.PIPE, shell=True)
share_data = share_process.communicate()[0].decode("utf-8").split("\n")
data = buildRanking(share_data)
print(
    f"FairShare Position: {data[requested_user].fair_share_rank}\nRaw Usage Position: {data[requested_user].raw_usage_rank}"
)
